;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 1/23/2023 7:03:31 PM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x2854      	GOTO       84
_interrupt:
0x0004	0x00FF      	MOVWF      R15
0x0005	0x0E03      	SWAPF      STATUS, 0
0x0006	0x0183      	CLRF       STATUS
0x0007	0x00A3      	MOVWF      ___saveSTATUS
0x0008	0x080A      	MOVF       PCLATH, 0
0x0009	0x00A4      	MOVWF      ___savePCLATH
0x000A	0x018A      	CLRF       PCLATH
0x000B	0x0870      	MOVF       R0, 0
0x000C	0x00A0      	MOVWF      32
;MyProject.c,39 :: 		void interrupt(void){
;MyProject.c,40 :: 		if ( !(PORTB & 0x40) )
0x000D	0x1B06      	BTFSC      PORTB, 6
0x000E	0x2816      	GOTO       L_interrupt3
;MyProject.c,41 :: 		{ while( !(PORTB & 0x40)) {
L_interrupt4:
0x000F	0x1B06      	BTFSC      PORTB, 6
0x0010	0x2813      	GOTO       L_interrupt5
;MyProject.c,43 :: 		left();
0x0011	0x204D      	CALL       _left
;MyProject.c,44 :: 		}
0x0012	0x280F      	GOTO       L_interrupt4
L_interrupt5:
;MyProject.c,45 :: 		INTCON = INTCON & 0xFE;   //check value
0x0013	0x30FE      	MOVLW      254
0x0014	0x058B      	ANDWF      INTCON, 1
;MyProject.c,46 :: 		}
0x0015	0x281E      	GOTO       L_interrupt6
L_interrupt3:
;MyProject.c,48 :: 		else if ( !(PORTB & 0x80))
0x0016	0x1B86      	BTFSC      PORTB, 7
0x0017	0x281E      	GOTO       L_interrupt7
;MyProject.c,49 :: 		{ while( !(PORTB & 0x80) )
L_interrupt8:
0x0018	0x1B86      	BTFSC      PORTB, 7
0x0019	0x281C      	GOTO       L_interrupt9
;MyProject.c,52 :: 		right();
0x001A	0x2046      	CALL       _right
;MyProject.c,53 :: 		}
0x001B	0x2818      	GOTO       L_interrupt8
L_interrupt9:
;MyProject.c,54 :: 		INTCON = INTCON & 0xFE;                //check value
0x001C	0x30FE      	MOVLW      254
0x001D	0x058B      	ANDWF      INTCON, 1
;MyProject.c,55 :: 		}
L_interrupt7:
L_interrupt6:
;MyProject.c,56 :: 		}
L_end_interrupt:
L__interrupt18:
0x001E	0x0820      	MOVF       32, 0
0x001F	0x00F0      	MOVWF      R0
0x0020	0x0824      	MOVF       ___savePCLATH, 0
0x0021	0x008A      	MOVWF      PCLATH
0x0022	0x0E23      	SWAPF      ___saveSTATUS, 0
0x0023	0x0083      	MOVWF      STATUS
0x0024	0x0EFF      	SWAPF      R15, 1
0x0025	0x0E7F      	SWAPF      R15, 0
0x0026	0x0009      	RETFIE
; end of _interrupt
_myDelay:
;MyProject.c,77 :: 		void myDelay(unsigned int mscnt){
;MyProject.c,80 :: 		for(ms=0;ms<mscnt;ms++){
0x0027	0x1283      	BCF        STATUS, 5
0x0028	0x1303      	BCF        STATUS, 6
0x0029	0x01F1      	CLRF       R1
0x002A	0x01F2      	CLRF       R1+1
L_myDelay10:
0x002B	0x0826      	MOVF       FARG_myDelay_mscnt+1, 0
0x002C	0x0272      	SUBWF      R1+1, 0
0x002D	0x1D03      	BTFSS      STATUS, 2
0x002E	0x2831      	GOTO       L__myDelay22
0x002F	0x0825      	MOVF       FARG_myDelay_mscnt, 0
0x0030	0x0271      	SUBWF      R1, 0
L__myDelay22:
0x0031	0x1803      	BTFSC      STATUS, 0
0x0032	0x2845      	GOTO       L_myDelay11
;MyProject.c,81 :: 		for(cnt=0;cnt<155;cnt++);//1ms
0x0033	0x01F3      	CLRF       R3
0x0034	0x01F4      	CLRF       R3+1
L_myDelay13:
0x0035	0x3000      	MOVLW      0
0x0036	0x0274      	SUBWF      R3+1, 0
0x0037	0x1D03      	BTFSS      STATUS, 2
0x0038	0x283B      	GOTO       L__myDelay23
0x0039	0x309B      	MOVLW      155
0x003A	0x0273      	SUBWF      R3, 0
L__myDelay23:
0x003B	0x1803      	BTFSC      STATUS, 0
0x003C	0x2841      	GOTO       L_myDelay14
0x003D	0x0AF3      	INCF       R3, 1
0x003E	0x1903      	BTFSC      STATUS, 2
0x003F	0x0AF4      	INCF       R3+1, 1
0x0040	0x2835      	GOTO       L_myDelay13
L_myDelay14:
;MyProject.c,80 :: 		for(ms=0;ms<mscnt;ms++){
0x0041	0x0AF1      	INCF       R1, 1
0x0042	0x1903      	BTFSC      STATUS, 2
0x0043	0x0AF2      	INCF       R1+1, 1
;MyProject.c,82 :: 		}
0x0044	0x282B      	GOTO       L_myDelay10
L_myDelay11:
;MyProject.c,83 :: 		}
L_end_myDelay:
0x0045	0x0008      	RETURN
; end of _myDelay
_right:
;MyProject.c,69 :: 		void right(){
;MyProject.c,70 :: 		PORTB= PORTB | 0x20; //B3 Buzzer ON
0x0046	0x1283      	BCF        STATUS, 5
0x0047	0x1303      	BCF        STATUS, 6
0x0048	0x1686      	BSF        PORTB, 5
;MyProject.c,71 :: 		PORTC= PORTC & 0xF7;// GEAR ON, select 1:0; XXXX 0XXX
0x0049	0x30F7      	MOVLW      247
0x004A	0x0587      	ANDWF      PORTC, 1
;MyProject.c,72 :: 		PORTC= PORTC | 0x04;// GEAR ON, select 0:1  XXXX 01XX
0x004B	0x1507      	BSF        PORTC, 2
;MyProject.c,76 :: 		}
L_end_right:
0x004C	0x0008      	RETURN
; end of _right
_left:
;MyProject.c,60 :: 		void left(){
;MyProject.c,61 :: 		PORTB= PORTB | 0x20; //B3 Buzzer ON
0x004D	0x1283      	BCF        STATUS, 5
0x004E	0x1303      	BCF        STATUS, 6
0x004F	0x1686      	BSF        PORTB, 5
;MyProject.c,62 :: 		PORTC= PORTC & 0xFB;// GEAR ON, select 1:0; XXXX X0XX
0x0050	0x30FB      	MOVLW      251
0x0051	0x0587      	ANDWF      PORTC, 1
;MyProject.c,63 :: 		PORTC= PORTC | 0x08;// GEAR ON, select 1:1; XXXX 10XX
0x0052	0x1587      	BSF        PORTC, 3
;MyProject.c,67 :: 		}
L_end_left:
0x0053	0x0008      	RETURN
; end of _left
_main:
;MyProject.c,8 :: 		void main() {
;MyProject.c,9 :: 		STATUS = STATUS | 0x20; // Select Bank 1 (set bit 5 in the status register)
0x0054	0x1683      	BSF        STATUS, 5
;MyProject.c,10 :: 		TRISB = 0xC0; // PORTB0-5 Output, 6 and 7 input
0x0055	0x30C0      	MOVLW      192
0x0056	0x1683      	BSF        STATUS, 5
0x0057	0x1303      	BCF        STATUS, 6
0x0058	0x0086      	MOVWF      TRISB
;MyProject.c,11 :: 		TRISC = 0x02; //RC1 input
0x0059	0x3002      	MOVLW      2
0x005A	0x0087      	MOVWF      TRISC
;MyProject.c,12 :: 		STATUS = STATUS & 0xDF; // Clear bit 5 in the STATUS register (Bank0)
0x005B	0x30DF      	MOVLW      223
0x005C	0x0583      	ANDWF      STATUS, 1
;MyProject.c,15 :: 		PORTB= 0x00;
0x005D	0x1283      	BCF        STATUS, 5
0x005E	0x0186      	CLRF       PORTB
;MyProject.c,16 :: 		PORTC= PORTC | 0x01;  //  turn on laser
0x005F	0x1407      	BSF        PORTC, 0
;MyProject.c,17 :: 		INTCON= INTCON | 0X88;//
0x0060	0x3088      	MOVLW      136
0x0061	0x048B      	IORWF      INTCON, 1
;MyProject.c,20 :: 		while(1){
L_main0:
;MyProject.c,21 :: 		PORTC= PORTC & 0xF3;//Turn off Gear    1111 0011
0x0062	0x30F3      	MOVLW      243
0x0063	0x0587      	ANDWF      PORTC, 1
;MyProject.c,22 :: 		PORTB= PORTB & 0xDF;  //turn off buzzer
0x0064	0x30DF      	MOVLW      223
0x0065	0x0586      	ANDWF      PORTB, 1
;MyProject.c,23 :: 		if (!(PORTC &0x02)){
0x0066	0x1887      	BTFSC      PORTC, 1
0x0067	0x2873      	GOTO       L_main2
;MyProject.c,25 :: 		PORTB= PORTB | 0x0A;
0x0068	0x300A      	MOVLW      10
0x0069	0x0486      	IORWF      PORTB, 1
;MyProject.c,26 :: 		PORTB= PORTB & 0xCB;   //  turn on motors for ball shooter
0x006A	0x30CB      	MOVLW      203
0x006B	0x0586      	ANDWF      PORTB, 1
;MyProject.c,29 :: 		myDelay( 3000)   ;
0x006C	0x30B8      	MOVLW      184
0x006D	0x00A5      	MOVWF      FARG_myDelay_mscnt
0x006E	0x300B      	MOVLW      11
0x006F	0x00A6      	MOVWF      FARG_myDelay_mscnt+1
0x0070	0x2027      	CALL       _myDelay
;MyProject.c,30 :: 		PORTB= PORTB & 0xE1;
0x0071	0x30E1      	MOVLW      225
0x0072	0x0586      	ANDWF      PORTB, 1
;MyProject.c,31 :: 		}
L_main2:
;MyProject.c,33 :: 		}
0x0073	0x2862      	GOTO       L_main0
;MyProject.c,36 :: 		}
L_end_main:
0x0074	0x2874      	GOTO       $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0004      [35]    _interrupt
0x0027      [31]    _myDelay
0x0046       [7]    _right
0x004D       [7]    _left
0x0054      [33]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF
0x0003       [1]    STATUS
0x0004       [1]    FSR
0x0006       [1]    PORTB
0x0007       [1]    PORTC
0x000A       [1]    PCLATH
0x000B       [1]    INTCON
0x0021       [2]    ___DoICPAddr
0x0023       [1]    ___saveSTATUS
0x0024       [1]    ___savePCLATH
0x0025       [2]    FARG_myDelay_mscnt
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x0086       [1]    TRISB
0x0087       [1]    TRISC
